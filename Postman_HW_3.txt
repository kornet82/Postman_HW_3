ДЗ_3 Postman
=====

1) необходимо залогиниться
POST
http://162.55.220.72:5006/login
login : str (кроме /)
password : str

Приходящий токен необходимо передать во все остальные запросы.

resp_token = pm.response.json().token

pm.environment.set("token", resp_token);

===================
дальше все запросы требуют наличие токена.
===================

2) http://162.55.220.72:5006/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token

{
    "age": 41,
    "salary": 1000,
    "name": "Pavel",
    "auth_token": "{{token}}"
}


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе.
Перейдите на https://jsonschema.net/home
Вставить туда response - получить схему - вставить ее в tests
var schema = {
    "schema": "https://json-schema.org/draft/2019-09/schema",
    "id": "http://example.com/example.json",
    "type": "object",
    "default": {},
    "title": "Root Schema",
    "required": [
        "person",
        "qa_salary_after_12_months",
        "qa_salary_after_6_months",
        "start_qa_salary"
    ],
    "properties": {
        "person": {
            "type": "object",
            "default": {},
            "title": "The person Schema",
            "required": [
                "u_age",
                "u_name",
                "u_salary_1_5_year"
            ],
            "properties": {
                "u_age": {
                    "type": "integer",
                    "default": 0,
                    "title": "The u_age Schema",
                    "examples": [
                        41
                    ]
                },
                "u_name": {
                    "type": "array",
                    "default": [],
                    "title": "The u_name Schema",
                    "items": {
                        "anyOf": [{
                            "type": "string",
                            "default": "",
                            "title": "A Schema",
                            "examples": [
                                "Pavel"
                            ]
                        },
                        {
                            "type": "integer",
                            "title": "A Schema",
                            "examples": [
                                1000,
                                41
                            ]
                        }]
                    },
                    "examples": [
                        ["Pavel",
                            1000,
                            41
                        ]
                    ]
                },
                "u_salary_1_5_year": {
                    "type": "integer",
                    "default": 0,
                    "title": "The u_salary_1_5_year Schema",
                    "examples": [
                        4000
                    ]
                }
            },
            "examples": [{
                "u_age": 41,
                "u_name": [
                    "Pavel",
                    1000,
                    41
                ],
                "u_salary_1_5_year": 4000
            }]
        },
        "qa_salary_after_12_months": {
            "type": "number",
            "default": 0.0,
            "title": "The qa_salary_after_12_months Schema",
            "examples": [
                2900.0
            ]
        },
        "qa_salary_after_6_months": {
            "type": "integer",
            "default": 0,
            "title": "The qa_salary_after_6_months Schema",
            "examples": [
                2000
            ]
        },
        "start_qa_salary": {
            "type": "integer",
            "default": 0,
            "title": "The start_qa_salary Schema",
            "examples": [
                1000
            ]
        }
    },
    "examples": [{
        "person": {
            "u_age": 41,
            "u_name": [
                "Pavel",
                1000,
                41
            ],
            "u_salary_1_5_year": 4000
        },
        "qa_salary_after_12_months": 2900.0,
        "qa_salary_after_6_months": 2000,
        "start_qa_salary": 1000
    }]
}

pm.test("Проверить схему", () =>{pm.response.to.have.jsonSchema(schema);});


3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
var req_salary = req_rawJson_data.salary 
var resp_Json_data = pm.response.json()
var resp_start_qa_salary = resp_Json_data.start_qa_salary
var resp_qa_salary_after_12_months = resp_Json_data.qa_salary_after_12_months
var resp_qa_salary_after_6_months = resp_Json_data.qa_salary_after_6_months
var resp_u_salary_1_5_year = resp_Json_data.person.u_salary_1_5_year

pm.test("start_qa_salary is correct - auto", function () {
    pm.expect(resp_start_qa_salary).to.equal(+req_salary);
});

pm.test("qa_salary_after_6_months is correct - auto", function () {
    pm.expect(resp_qa_salary_after_6_months).to.equal(+req_salary*2);
});

pm.test("qa_salary_after_12_months is correct - auto", function () {
    pm.expect(resp_qa_salary_after_12_months).to.equal(+req_salary*2.9);
});

pm.test("u_salary_1_5_year is correct - auto", function () {
    pm.expect(resp_u_salary_1_5_year).to.equal(+req_salary*4);
});


4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user
pm.collectionVariables.set("u_salary_1_5_year", resp_u_salary_1_5_year);
===================

3) http://162.55.220.72:5005/new_data
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Тесты:
1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

2) Проверка структуры json в ответе.
var schema = {
    "schema": "https://json-schema.org/draft/2019-09/schema",
    "id": "http://example.com/example.json",
    "type": "object",
    "default": {},
    "title": "Root Schema",
    "required": [
        "age",
        "name",
        "salary"
    ],
    "properties": {
        "age": {
            "type": "integer",
            "default": 0,
            "title": "The age Schema",
            "examples": [
                41
            ]
        },
        "name": {
            "type": "string",
            "default": "",
            "title": "The name Schema",
            "examples": [
                "Pavel"
            ]
        },
        "salary": {
            "type": "array",
            "default": [],
            "title": "The salary Schema",
            "items": {
                "anyOf": [{
                    "type": "integer",
                    "default": 0,
                    "title": "A Schema",
                    "examples": [
                        1000
                    ]
                },
                {
                    "type": "string",
                    "title": "A Schema",
                    "examples": [
                        "2000",
                        "3000"
                    ]
                }]
            },
            "examples": [
                [1000,
                    "2000",
                    "3000"
                ]
            ]
        }
    },
    "examples": [{
        "age": 41,
        "name": "Pavel",
        "salary": [
            1000,
            "2000",
            "3000"
        ]
    }]
}

pm.test("Проверить схему", () =>{pm.response.to.have.jsonSchema(schema);});

3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
pm.test("start_qa_salary is correct - auto", function () {
    pm.expect(resp_salary[0]).to.equal(+req_salary);
});

pm.test("salary[1] is correct - auto", function () {
    pm.expect(+resp_salary[1]).to.equal(req_salary*2);
});

pm.test("salary[1] is correct - auto", function () {
    pm.expect(+resp_salary[2]).to.equal(req_salary*3);
});

4) проверить, что 2-й элемент массива salary больше 1-го и 0-го
pm.test("salary[2] > than salary[1] and salary[0] - auto", function () {
    pm.expect(+resp_salary[2]).greaterThan(+resp_salary[1])
});

pm.test("salary[2] > than salary[1] and salary[1] - auto", function () {
    pm.expect(+resp_salary[2]).greaterThan(resp_salary[0])
});

===================

4) http://162.55.220.72:5006/test_pet_info
req.
POST
age: int
weight: int
name: str
auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.

===================

5) http://162.55.220.72:5005/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) Проверить что занчение поля name = значению переменной name из окружения
4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age

===================

6) http://162.55.220.72:5005/currency
req.
POST
auth_token

Resp. Передаётся список массив объектов.
[
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
…
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
]

Тесты:
1) Можете взять любой объект из присланного списка, используйте js random.
В объекте возьмите Cur_ID и передать через окружение в следующий запрос.

 ===================

7) http://162.55.220.72:5005/curr_byn
req.
POST
auth_token
curr_code: int

Resp.
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.


===============
***
1) получить список валют
2) итерировать список валют
3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты
4) если возвращается 500 код, переходим к следующей итреации
5) если получаем 200 код, проверяем response json на наличие поля "Cur_OfficialRate"
6) если поле есть, пишем в консоль инфу про фалюту в виде response
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}
7) переходим к следующей итерации

